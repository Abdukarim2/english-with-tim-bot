from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from loader import dp, bot
from messages.message import MESSAGES as M
from keyboards.reply import four_row, three_row, back
from keyboards.inline import inlines
from utils.database import Database
from configs.config import GROUP_ID


class Courses(StatesGroup):
    name = State()


class ChooseTeacher(StatesGroup):
    name = State()

class AddCourseTeacher(StatesGroup):
    name = State()
    about = State()
    category = State()


class UserRegistration(StatesGroup):
    name = State()
    surname = State()
    phone1 = State()
    phone2 = State()
    course = State()
    comment = State()


class CommentState(StatesGroup):
    name = State()
    surname = State()
    number = State()
    comment = State()


class CheckStudent(StatesGroup):
    name = State()
    surname = State()
    teacher = State()
    date = State()
    days = State()
    number = State()


@dp.message_handler(state=Courses.name)
async def choose_category(message: types.Message, state: FSMContext):
    db = Database()
    async with state.proxy() as data:
        if message.text in M.get('category').get("btns"):
            if message.text == "üîô–ù–∞–∑–∞–¥":
                await state.finish()
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                                     reply_markup=four_row(
                                         M.get(f"{data['back_to']}").get("btns")
                                            ))
            else:
                if data['table'] == "courses":
                    courses = db.courses_teachers(table_name=f"courses", category=message.text)
                    for course in courses:
                        await message.answer(f"<b>{course[1]}</b>\n{course[2]}")
                elif data['table'] == "teachers":
                    teachers = db.courses_teachers(table_name="teachers", category=message.text)
                    markup = inlines(words=teachers, delete="choose_teachers_")
                    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–º—è —É—á–∏—Ç–µ–ª—è", reply_markup=markup)
                elif data['table'] == "students":
                    students = db.users(category=message.text)
                    if len(students) != 0:
                        markup = inlines(words=students, delete="get_students_")
                        await message.answer("O'quvchini tanlang", reply_markup=markup)
                    else:
                        await message.answer(f"{message.text} da o'quvchi topilmadiü§∑‚Äç‚ôÇÔ∏è")
                elif data['table'] == "del_student":
                    students = db.users(category=message.text)
                    if len(students) != 0:
                        markup = inlines(words=students, delete="del_student_")
                        await message.answer("O'quvchini tanlang", reply_markup=markup)
                    else:
                        await message.answer(f"{message.text} da o'quvchi topilmadiü§∑‚Äç‚ôÇÔ∏è")
        else:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                                 reply_markup=four_row(M.get('category').get("btns")))


@dp.message_handler(state=AddCourseTeacher.name)
async def add_course_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
        text = "Kurs haqida matn kiritn" if data['table'] == "courses" \
                                         else "O'qituvchi haqida matn kiritn"

        await message.answer(text)
        await AddCourseTeacher.next()


@dp.message_handler(state=AddCourseTeacher.about)
async def add_course_about(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['about'] = message.text
        text = "Kurs kategoriyasini tnlang" if data['table'] == "courses" \
            else "O'qituvchi kategoriyasini tnlang"
        await message.answer(text,
                             reply_markup=three_row(M.get('category').get("btns")[0:3]))
        await AddCourseTeacher.next()


@dp.message_handler(state=AddCourseTeacher.category)
async def add_course_category(message: types.Message, state: FSMContext):
    db = Database()
    async with state.proxy() as data:
        if message.text in M.get('category').get("btns")[0:3]:
            creating = db.courses_teachers(table_name=f"{data['table']}", category=message.text, name=data['name'], about=data['about'])
            if creating == 200:
                await message.answer("Muvofaqiyatlik qo'shildi", reply_markup=four_row(M.get('start').get('btns')))
                await state.finish()
            else:
                await message.answer("Nimadur hato ketdi boshqatdan urining", reply_markup=four_row(M.get('start').get('btns')))
                await state.finish()
        else:
            await message.answer("Kurs kategoriyasini tnlang",
                                 reply_markup=three_row(M.get('category').get("btns")[0:3]))


@dp.message_handler(state=UserRegistration.name)
async def user_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text.lower() == "üîô–Ω–∞–∑–∞–¥":
            await state.finish()
            await message.delete()
            await message.answer(message.text, reply_markup=four_row(M.get('start').get('btns')))
        else:
            data['name'] = message.text
            await message.answer("–ú–æ–∂–Ω–æ –∏ —Ñ–∞–º–∏–ª–∏—é?")
            await UserRegistration.next()


@dp.message_handler(state=UserRegistration.surname)
async def user_sur(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text.lower() == "üîô–Ω–∞–∑–∞–¥":
            await state.finish()
            await message.delete()
            await message.answer(message.text, reply_markup=four_row(M.get('start').get('btns')))
        else:
            data['surname'] = message.text
            await message.answer("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏?")
            await UserRegistration.next()


@dp.message_handler(state=UserRegistration.phone1)
async def user_ph1(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text.lower() == "üîô–Ω–∞–∑–∞–¥":
            await state.finish()
            await message.delete()
            await message.answer(message.text, reply_markup=four_row(M.get('start').get('btns')))
        else:
            if message.text.strip("+").isdigit() and len(message.text.strip("+")) == 9 or len(message.text.strip("+")) == 12 and "." not in message.text.strip("+"):
                data['phone1'] = message.text
                await message.answer("–ï—â–µ –æ–¥–∏–Ω –Ω–æ–º–µ—Ä, –∞ –≤–¥—Ä—É–≥ –Ω–µ –¥–æ–∑–≤–æ–Ω–∏–º—Å—è")
                await UserRegistration.next()
            else:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")

@dp.message_handler(state=UserRegistration.phone2)
async def user_ph2(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text.lower() == "üîô–Ω–∞–∑–∞–¥":
            await state.finish()
            await message.delete()
            await message.answer(message.text, reply_markup=four_row(M.get('start').get('btns')))
        else:
            if message.text.strip("+").isdigit() and len(message.text.strip("+")) == 9 or len(message.text.strip("+")) == 12 and "." not in message.text.strip("+"):
                if data.get('phone1')[::-1][0:9] != message.text.strip("+")[::-1][0:9]:
                    data['phone2'] = message.text
                    await message.answer("–ö–∞–∫–∏–µ –∫—É—Ä—Å—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?",
                                         reply_markup=four_row(M.get("category").get("btns"), one_time=True))
                    await UserRegistration.next()
                else:
                    await message.answer("–ü–µ—Ä–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –Ω–æ–º–µ—Ä–æ–º")
            else:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")


@dp.message_handler(state=UserRegistration.course)
async def user_course(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text.lower() == "üîô–Ω–∞–∑–∞–¥":
            await state.finish()
            await message.delete()
            await message.answer(message.text, reply_markup=four_row(M.get('start').get('btns')))
        else:
            if message.text in M.get('category').get("btns")[0:3]:
                data['course'] = message.text
                await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ \"üßë‚Äçüíª–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É\".", reply_markup=back(additional=True))
                await UserRegistration.next()
            else:
                await message.answer("–ö–∞–∫–∏–µ –∫—É—Ä—Å—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?")


@dp.message_handler(state=UserRegistration.comment)
async def user_course(message: types.Message, state: FSMContext):
    db = Database()
    async with state.proxy() as data:
        if message.text.lower() == "üîô–Ω–∞–∑–∞–¥":
            await state.finish()
            await message.delete()
            await message.answer(message.text, reply_markup=four_row(M.get('start').get('btns')))
        else:
            creating = db.users(
                str(data['name']),
                str(data['surname']),
                int(data['phone1']),
                int(data['phone2']),
                str(message.chat.username),
                str(data['course']))
            if creating == 200:
                if message.text.lower() == "üßë‚Äçüíª–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É":
                    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É. –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è. ", reply_markup=four_row(M.get('start').get('btns')))
                    message_to_group = f"<b>Yangi o'quvchi:</b>\n\n<b>Ismi:</b>\n{data['name']}\n\n<b>Familyasi:</b>\n{data['surname']}\n\n<b>Bog'lanish:</b>\n@{message.chat.username}\n\n<b>Telefo'n raqami1:</b>\n{data['phone1']}\n\n<b>Telefo'n raqami2:</b>\n{data['phone2']}\n\n<b>Tanlagan kursi:</b>\n{data['course']}"
                    await bot.send_message(GROUP_ID, message_to_group)
                else:
                    message_to_group = f"<b>Yangi o'quvchi:</b>\n\n<b>Ismi:</b>\n{data['name']}\n\n<b>Familyasi:</b>\n{data['surname']}\n\n<b>Bog'lanish:</b>\n@{message.chat.username}\n\n<b>Telefo'n raqami1:</b>\n{data['phone1']}\n\n<b>Telefo'n raqami2:</b>\n{data['phone2']}\n\n<b>Tanlagan kursi:</b>\n{data['course']}\n\n<b>Qo'shimcha habar:</b>\n{message.text}"
                    await bot.send_message(GROUP_ID, message_to_group)
                    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É. –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è. ", reply_markup=four_row(M.get('start').get('btns')))
            else:
                await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",reply_markup=four_row(M.get('start').get('btns')))
            await state.finish()


@dp.message_handler(state=CommentState.name)
async def comment_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text.lower() == "üîô–Ω–∞–∑–∞–¥":
            await state.finish()
            await message.delete()
            await message.answer(message.text, reply_markup=four_row(M.get('connect').get('btns')))
        else:
            data['name'] = message.text
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é")
            await CommentState.next()


@dp.message_handler(state=CommentState.surname)
async def comment_surname(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text.lower() == "üîô–Ω–∞–∑–∞–¥":
            await state.finish()
            await message.delete()
            await message.answer(message.text, reply_markup=four_row(M.get('connect').get('btns')))
        else:
            data['surname'] = message.text
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            await CommentState.next()


@dp.message_handler(state=CommentState.number)
async def comment_number(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text.lower() == "üîô–Ω–∞–∑–∞–¥":
            await state.finish()
            await message.delete()
            await message.answer(message.text, reply_markup=four_row(M.get('connect').get('btns')))
        else:
            if message.text.strip("+").isdigit() and len(message.text.strip("+")) == 9 or len(message.text.strip("+")) == 12 and "." not in message.text.strip("+"):
                data['number'] = message.text
                await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
                await CommentState.next()
            else:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")


@dp.message_handler(state=CommentState.comment)
async def comment_comment(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text.lower() == "üîô–Ω–∞–∑–∞–¥":
            await state.finish()
            await message.delete()
            await message.answer(message.text, reply_markup=four_row(M.get('connect').get('btns')))
        else:
            message_to_gr = f"<b>Yangi fikr</b>\n\n<b>Ismi</b>\n{data['name']}\n\n<b>Familyasi</b>\n{data['surname']}\n\n<b>Telefo'n raqami</b>\n{data['number']}\n\n<b>Fikr</b>\n{message.text}"
            await bot.send_message(GROUP_ID, message_to_gr)
            await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –æ—Ç–∑—ã–≤. –ú—ã –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–µ–º–∏–º—Å—è —É–ª—É—á—à–∏—Ç—å –Ω–∞—à–∏ —É—Å–ª—É–≥–∏.", reply_markup=four_row(M.get('connect').get('btns')))
            await state.finish()


@dp.message_handler(state=CheckStudent.name)
async def check_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text.lower() == "üîô–Ω–∞–∑–∞–¥":
            await state.finish()
            await message.delete()
            await message.answer(message.text, reply_markup=four_row(M.get('connect').get('btns')))
        else:
            data['name'] = message.text
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é")
            await CheckStudent.next()


@dp.message_handler(state=CheckStudent.surname)
async def check_surname(message: types.Message, state: FSMContext):
    db = Database()
    async with state.proxy() as data:
        if message.text.lower() == "üîô–Ω–∞–∑–∞–¥":
            await state.finish()
            await message.delete()
            await message.answer(message.text, reply_markup=four_row(M.get('connect').get('btns')))
        else:
            teachers_db = db.courses_teachers(table_name="teachers", category='', all=True)
            data['surname'] = message.text
            await message.answer("–£ –∫–æ–≥–æ –≤—ã —É—á–∏—Ç–µ—Å—å?\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–º—è —É—á–∏—Ç–µ–ª—è", reply_markup=inlines(teachers_db))
            await CheckStudent.next()


@dp.callback_query_handler(lambda call: True, state=CheckStudent.teacher)
async def check_teacher_call(message: types.CallbackQuery, state: FSMContext):
    teacher = message.data[9:]
    async with state.proxy() as data:
        data['teacher'] = teacher
        await bot.edit_message_text("–í–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –≤–∞—à–∏ —É—Ä–æ–∫–∏? ",
                                    message.from_user.id, message.message.message_id,
                                    reply_markup=inlines(M.get("dates").get("btns")))
        await CheckStudent.next()


@dp.message_handler(state=CheckStudent.teacher)
async def check_teacher(message: types.Message, state: FSMContext):
    if message.text.lower() == "üîô–Ω–∞–∑–∞–¥":
        await state.finish()
        await message.delete()
        await message.answer(message.text, reply_markup=four_row(M.get('connect').get('btns')))
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–º—è —É—á–∏—Ç–µ–ª—è", reply_markup=inlines(M.get("dates").get("btns")))


@dp.callback_query_handler(lambda call: True, state=CheckStudent.date)
async def check_date_call(message: types.CallbackQuery, state: FSMContext):
    date = message.data[9:]
    async with state.proxy() as data:
        data['date'] = date
        await bot.edit_message_text("–í –∫–∞–∫–∏–µ –¥–Ω–∏ –≤—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –Ω–∞ –∫—É—Ä—Å—ã?", message.from_user.id, message.message.message_id,
                                    reply_markup=inlines(M.get("days").get("btns")))
        await CheckStudent.next()


@dp.message_handler(state=CheckStudent.date)
async def check_date(message: types.Message, state: FSMContext):
    if message.text.lower() == "üîô–Ω–∞–∑–∞–¥":
        await state.finish()
        await message.delete()
        await message.answer(message.text, reply_markup=four_row(M.get('connect').get('btns')))
    else:
        await message.answer("–í–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –≤–∞—à–∏ —É—Ä–æ–∫–∏?", reply_markup=inlines(M.get("dates").get("btns")))


@dp.callback_query_handler(lambda call: True, state=CheckStudent.days)
async def check_days_call(message: types.CallbackQuery, state: FSMContext):
    days = message.data[9:]
    async with state.proxy() as data:
        data['days'] = days
        await bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", message.from_user.id, message.message.message_id)
        await CheckStudent.next()


@dp.message_handler(state=CheckStudent.days)
async def check_days(message: types.Message, state: FSMContext):
    if message.text.lower() == "üîô–Ω–∞–∑–∞–¥":
        await state.finish()
        await message.delete()
        await message.answer(message.text, reply_markup=four_row(M.get('connect').get('btns')))
    else:
        await message.answer("–í –∫–∞–∫–∏–µ –¥–Ω–∏ –≤—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –Ω–∞ –∫—É—Ä—Å—ã?", reply_markup=inlines(M.get("days").get("btns")))


@dp.message_handler(state=CheckStudent.number)
async def check_number(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text.lower() == "üîô–Ω–∞–∑–∞–¥":
            await state.finish()
            await message.delete()
            await message.answer(message.text, reply_markup=four_row(M.get('connect').get('btns')))
        else:
            if message.text.strip("+").isdigit() and len(message.text.strip("+")) == 9 or len(message.text.strip("+")) == 12 and "." not in message.text.strip("+"):
                if data.get("debt"):
                    message_to_gr = f"<b>Qarzdorlikni tekshirish</b>\n\n<b>Ismi</b>\n{data['name']}\n\n<b>Familyasi</b>\n{data['surname']}\n\n<b>O'qituvchisi</b>\n{data['teacher']}\n\n<b>Dars soati</b>\n{data['date']}\n\n<b>Dars kunlari</b>\n{data['days']}\n\n<b>Telefo'n raqami</b>\n{message.text}"
                    await bot.send_message(GROUP_ID, message_to_gr)
                else:
                    message_to_gr = f"<b>Davomadni tekshirish</b>\n\n<b>Ismi</b>\n{data['name']}\n\n<b>Familyasi</b>\n{data['surname']}\n\n<b>O'qituvchisi</b>\n{data['teacher']}\n\n<b>Dars soati</b>\n{data['date']}\n\n<b>Dars kunlari</b>\n{data['days']}\n\n<b>Telefo'n raqami</b>\n{message.text}"
                    await bot.send_message(GROUP_ID, message_to_gr)
                await message.answer("–í–∞—à –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è", reply_markup=four_row(M.get('start').get('btns')))
                await state.finish()
            else:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")


@dp.callback_query_handler(lambda call: True, state=Courses.name)
async def choose_teachers(message: types.CallbackQuery, state: FSMContext):
    db = Database()
    if message.data.startswith("choose_teachers_"):
        teacher = message.data[16:]
        reslut = db.choose(table_name="teachers", where=f"{teacher}")
        await bot.edit_message_text(f"<b>{reslut[1]}</b>\n{reslut[2]}", message.from_user.id, message.message.message_id)
    elif message.data.startswith("get_students_"):
        student = message.data[13:]
        result = db.choose(table_name="users", where=f"{student}")
        await bot.edit_message_text(f"<b>Ismi:</b>\n{result[1]}\n\n<b>Familyasi:</b>\n{result[2]}\n\n<b>telefo'n1:</b>\n+{result[3]}\n\n<b>telefo'n2:</b>\n+{result[4]}\n\n<b>bog'lanish:</b>\n@{result[5]}\n\n<b>Kursi:</b>\n{result[6]}", message.from_user.id,
                                    message.message.message_id)
    elif message.data.startswith("del_student_"):
        student = message.data[12:]
        await bot.send_message(message.from_user.id,student)
        deleting = db.choose(table_name="users", where=student, delete=True)
        if deleting == 200:
            await bot.edit_message_text(f"Muvofaqiyatlik o'chirildi", message.from_user.id, message.message.message_id)
        else:
            await bot.edit_message_text(f"Nimadur hato ketdi boshqatdan urinib ko'rin", message.from_user.id, message.message.message_id)
